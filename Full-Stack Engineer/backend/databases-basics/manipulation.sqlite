# SQL Query Cheat Sheet

## Initialization

1. **`CREATE DATABASE`**
   - *Description:* Creates a new database.
   - *How to use:* Execute `CREATE DATABASE <database_name>;` in your SQL environment.

2. **`USE`**
   - *Description:* Switches to a specific database.
   - *How to use:* Use `USE <database_name>;` to select the database for subsequent operations.

3. **`CREATE TABLE`**
   - *Description:* Creates a new table in the current database.
   - *How to use:* Execute a statement like:
     ```sql
     CREATE TABLE <table_name> (
         column1 datatype1 CONSTRAINT constraint_name PRIMARY KEY,
         column2 datatype2 CONSTRAINT constraint_name UNIQUE,
         column3 datatype3 CONSTRAINT constraint_name NOT NULL,
         column4 datatype4 CONSTRAINT constraint_name DEFAULT default_value,
         ...
     );
     ```

4. **`INSERT INTO`**
   - *Description:* Adds new records to a table.
   - *How to use:* Execute a statement like:
     ```sql
     INSERT INTO <table_name> (column1, column2, ...)
     VALUES (value1, value2, ...);
     ```

## Altering Tables

5. **`ALTER TABLE`**
   - *Description:* Modifies the structure of an existing table.
   - *How to use:* Execute statements like:
     - Add a new column: `ALTER TABLE <table_name> ADD COLUMN new_column datatype;`
     - Modify a column: `ALTER TABLE <table_name> MODIFY COLUMN column_name new_datatype;`
     - Drop a column: `ALTER TABLE <table_name> DROP COLUMN column_name;`

## Checking Data

6. **`SELECT`**
   - *Description:* Retrieves data from one or more tables.
   - *How to use:* Execute `SELECT * FROM <table_name>;` to retrieve all columns from a specific table.

## Filtering Data

7. **`WHERE`**
   - *Description:* Filters data based on a specified condition.
   - *How to use:* Add `WHERE <condition>` to your `SELECT` statement to filter results.

## Sorting Data

8. **`ORDER BY`**
   - *Description:* Sorts the result set based on one or more columns.
   - *How to use:* Add `ORDER BY <column_name> [ASC|DESC];` to your `SELECT` statement to specify sorting.

## Aggregating Data

9. **`GROUP BY`**
   - *Description:* Groups rows based on the values in specified columns.
   - *How to use:* Include `GROUP BY <column_name>;` in your `SELECT` statement for aggregating data.

10. **`HAVING`**
    - *Description:* Filters grouped data based on a specified condition.
    - *How to use:* Add `HAVING <condition>` after `GROUP BY` for additional filtering.

## Joining Tables

11. **`INNER JOIN`**
    - *Description:* Retrieves records that have matching values in both tables.
    - *How to use:* Execute `SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;` to perform an inner join.

12. **`LEFT JOIN`**
    - *Description:* Retrieves all records from the left table and the matched records from the right table.
    - *How to use:* Use `SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;` for a left join.

13. **`RIGHT JOIN`**
    - *Description:* Retrieves all records from the right table and the matched records from the left table.
    - *How to use:* Execute `SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;` for a right join.

14. **`FULL OUTER JOIN`**
    - *Description:* Retrieves all records when there is a match in either the left or right table.
    - *How to use:* Use `SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;` for a full outer join.

## Updating Data

15. **`UPDATE`**
    - *Description:* Modifies existing records in a table.
    - *How to use:* Execute `UPDATE <table_name> SET <column1=value1, column2=value2, ...> WHERE <condition>;` to update records.

## Deleting Data

16. **`DELETE`**
    - *Description:* Deletes records from a table based on a condition.
    - *How to use:* Use `DELETE FROM <table_name> WHERE <condition>;` to delete specific records.

Feel free to customize and expand this SQL cheat sheet according to your needs!
