---
# Our first YAML document
human: trainer
animals:
  elephant: circus
  horse: rodeo
…

# Sequences

#YAML sequences look a bit like lists or arrays in programming languages. They can contain any mix of data types, including nested sequences or mappings. Sequences are usually displayed on multiple lines, where each element begins with a dash, followed by a space, and ends with a line break. Take a look at an example:

fish:
  - Tuna
  - Trout
  - Salmon
numbers:
  - pi
  - 7
  - 1.1

#Sequences can also be written on a single line surrounded by brackets. In this case, elements are separated by a comma and a space, like this:

planets: [Mercury, Venus, Mars]

#Scalars
#All remaining data types in YAML are scalars, also known as single value data types. These include integers, floating-point numbers, booleans, null, and strings. Let’s see scalars in action:

scalars:
  - 1
  - 1.0
  - True
  - null
  - "string"

#Let’s break down the types above:

Numbers: In YAML, numbers are classified by a single rule. Any number that doesn’t have a decimal point is an integer, while numbers that do are floats.

#Booleans: For booleans, the keywords True, On, and Yes evaluate to true. The keywords False, Off, and No will to false. Here are some examples:

elephant:
  - big: True
  - mammal: Yes
  - yellow: Off

#Null: A null value can be represented by either ~ or null (could also be written as Null or NULL), like this:
nulls:
  - null
  - ~

#Strings: In YAML, strings generally do not need quotes. Two notable exceptions are as follows:
#Use single or double quotes to create a value that would normally be interpreted as a different data type to be a string, i.e., “10” or "null"
#Use double quotes to allow specific sequences to be escaped instead of treated as literals, such as "\n" representing a line break
#Here are some more examples of strings in action:

strings:
  - This string ends with a slash followed by n \n
  - "This string ends with a line break \n"
  - 'True'