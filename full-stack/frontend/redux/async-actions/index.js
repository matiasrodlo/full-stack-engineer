import { createStore, applyMiddleware } from "redux";

const messageReducer = (state = "", action) => {
  if (action.type === "NEW_MESSAGE") {
    return action.payload;
  } else {
    return state;
  }
};

const logger = (storeAPI) => (next) => (action) => {
  console.log(storeAPI.getState());
  const nextState = next(action);
  console.log(nextState);
  return nextState; // pass the action on to the next middleware in the pipeline
};

const store = createStore(messageReducer, "", applyMiddleware(logger));

store.dispatch({
  type: "NEW_MESSAGE",
  payload: "I WROTE A MIDDLEWARE",
});

// introduction to thunks

const remindMeTo = (task) => {
  return `Remember to ${task}!!!`;
};

const remindMeLater = (task) => {
  return () => {
    // call remindMeTo
    return remindMeTo(task);
  };
};

console.log(remindMeTo("call mom"));

const reminder = remindMeLater("get groceries");
console.log(reminder());

// createAsyncThunk

import { fetchRecipes } from "../../app/api";
import { createSlice } from "@reduxjs/toolkit";

const loadRecipes = "replace me";

export const allRecipesSlice = createSlice({
  name: "allRecipes",
  initialState: {
    recipes: [],
    isLoading: false,
    hasError: false,
  },
  reducers: {
    addRecipes(state, action) {
      state.recipes = action.payload;
    },
  },
});

export default allRecipesSlice.reducer;

// createAsyncThunk

import { fetchRecipes } from '../../app/api'
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';


const loadRecipes = createAsyncThunk('allRecipes/loadRecipes', const data = await fetchRecipes()  // fetch data
const json = await data.json()  // transform to JSON
return json  // return data as JSON);

export const allRecipesSlice = createSlice({
  name: 'allRecipes',
  initialState: {
    recipes: [],
    isLoading: false,
    hasError: false,
  },
  reducers: {
    addRecipes(state, action) {
      state.recipes = action.payload
    }
  },  
});

export default allRecipesSlice.reducer;

// Passing Arguments to thunks

import { createAsyncThunk } from "@reduxjs/toolkit";
import { searchRecipes } from './api';

const searchRecipesByName = createAsyncThunk(
  'recipes/searchRecipesByName',
  async (recipeName, thunkAPI) => {
    const response = await searchRecipes(recipeName);
    return response.data;
  }
);

// Actions Generated by createAsyncThunk()

import { fetchRecipes } from '../../app/api'
import { createAsyncThunk } from "@reduxjs/toolkit";

const loadRecipes = createAsyncThunk(
  'allRecipes/loadRecipes',
  async (arg, thunkAPI) => {
    const response = await fetchRecipes();
    return response.data
  }
)

// The above call to createAsyncThunk will generate what three action types?
// 1. allRecipes/loadRecipes/pending
// 2. allRecipes/loadRecipes/fulfilled
// 3. allRecipes/loadRecipes/rejected

// Using createAlice() with async action creator

import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  addFavoriteRecipe,
  removeFavoriteRecipe,
} from "../favoriteRecipes/favoriteRecipesSlice";
import { selectSearchTerm } from "../search/searchSlice";
export const loadRecipes = createAsyncThunk(
  "allRecipes/getAllRecipes",
  async () => {
    const data = await fetch("api/recipes?limit=10");
    const json = await data.json();
    return json;
  }
);

const sliceOptions = {
  name: "allRecipes",
  initialState: {
    recipes: [],
    isLoading: false,
    hasError: false,
  },
  reducers: {},
  extraReducers: {
    [loadRecipes.pending]: (state, action) => {
      // fill out function body
      state.isLoading = true;
      state.hasError = false;
    },
    [loadRecipes.fulfilled]: (state, action) => {
      // fill out function body
      state.isLoading = false;
      state.hasError = false;
      state.recipes = action.payload;
    },
    [loadRecipes.rejected]: (state, action) => {
      // fill out function body
      state.isLoading = false;
      state.hasError = true;
    },
  },
};

export const allRecipesSlice = createSlice(sliceOptions);

export const selectAllRecipes = (state) => state.allRecipes.recipes;

export const selectFilteredAllRecipes = (state) => {
  const allRecipes = selectAllRecipes(state);
  const searchTerm = selectSearchTerm(state);

  return allRecipes.filter((recipe) =>
    recipe.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
};

export default allRecipesSlice.reducer;