-- Query 1: Retrieve the title and score from hacker_news, ordered by score in descending order, and limit the results to 5.
SELECT title, score
FROM hacker_news
ORDER BY score DESC
LIMIT 5;

-- Query 2: Calculate the sum of all scores in hacker_news.
SELECT SUM(score)
FROM hacker_news;

-- Query 3: Retrieve the user and the sum of their scores from hacker_news, grouped by user, and only include users with a total score greater than 200.
SELECT user, SUM(score)
FROM hacker_news
GROUP BY user
HAVING SUM(score) > 200;

-- Query 4: Calculate the result of the expression (309 + 302 + 282 + 517) / 6366.0.
SELECT (309 + 302 + 282 + 517) / 6366.0;

-- Query 5: Retrieve the user, url, and count of occurrences for a specific URL in hacker_news.
SELECT user, url, COUNT(url)
FROM hacker_news
WHERE url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
GROUP BY user;

-- Query 6: Categorize URLs into sources (GitHub, Medium, New York Times, or Other) and count occurrences for each category.
SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytyimes.com%' THEN 'New York Times'
   ELSE 'Other'
END AS 'Source',
COUNT(url)
FROM hacker_news
GROUP BY 1;

-- Query 7: Retrieve the timestamp from hacker_news for the first 10 rows.
SELECT timestamp
FROM hacker_news
LIMIT 10;

-- Query 8: Group hacker_news data by hour, calculate average score, and count the number of stories for each hour.
SELECT 
    strftime('%H', timestamp) as hour,
    AVG(score) AS avg_score,
    COUNT(*) num_stories
FROM hacker_news
WHERE timestamp IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC;
